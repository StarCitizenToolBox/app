// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Get the system OS name
String getSystemName() =>
    RustLib.instance.api.crateApiSystemInfoGetSystemName();

/// Get the CPU name/model
String getCpuName() => RustLib.instance.api.crateApiSystemInfoGetCpuName();

/// Get the system memory size in GB
BigInt getSystemMemorySizeGb() =>
    RustLib.instance.api.crateApiSystemInfoGetSystemMemorySizeGb();

/// Get the number of logical processors
int getNumberOfLogicalProcessors() =>
    RustLib.instance.api.crateApiSystemInfoGetNumberOfLogicalProcessors();

bool checkNvmePatchStatus() =>
    RustLib.instance.api.crateApiSystemInfoCheckNvmePatchStatus();

/// Get list of process IDs by name
Uint32List getProcessIdsByName({required String processName}) => RustLib
    .instance
    .api
    .crateApiSystemInfoGetProcessIdsByName(processName: processName);

/// Get GPU information
String getGpuInfo() => RustLib.instance.api.crateApiSystemInfoGetGpuInfo();

/// Get disk information
String getDiskInfo() => RustLib.instance.api.crateApiSystemInfoGetDiskInfo();

/// Kill processes by PID
int killProcessesByPids({required List<int> pids}) =>
    RustLib.instance.api.crateApiSystemInfoKillProcessesByPids(pids: pids);

String addNvmePatch() => RustLib.instance.api.crateApiSystemInfoAddNvmePatch();

bool removeNvmePatch() =>
    RustLib.instance.api.crateApiSystemInfoRemoveNvmePatch();

String resolveShortcutPath({required String shortcutPath}) => RustLib
    .instance
    .api
    .crateApiSystemInfoResolveShortcutPath(shortcutPath: shortcutPath);

/// Open file or directory in system file explorer
void openInExplorer({required String path, required bool isFile}) => RustLib
    .instance
    .api
    .crateApiSystemInfoOpenInExplorer(path: path, isFile: isFile);

/// Start process with elevated privileges (Windows) or regular privileges (other platforms)
void startProcessElevated({
  required String executablePath,
  required List<String> args,
}) => RustLib.instance.api.crateApiSystemInfoStartProcessElevated(
  executablePath: executablePath,
  args: args,
);

/// Execute a script or command with system shell
String executeSystemCommand({required String command}) => RustLib.instance.api
    .crateApiSystemInfoExecuteSystemCommand(command: command);

int getDiskSectorInfo({required String driveLetter}) => RustLib.instance.api
    .crateApiSystemInfoGetDiskSectorInfo(driveLetter: driveLetter);

void createDesktopShortcut({
  required String targetPath,
  required String shortcutName,
}) => RustLib.instance.api.crateApiSystemInfoCreateDesktopShortcut(
  targetPath: targetPath,
  shortcutName: shortcutName,
);
